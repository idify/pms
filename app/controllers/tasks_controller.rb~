class TasksController < ApplicationController
 load_and_authorize_resource :except=>[:task_update,:task_under,:task_deploy]

before_filter :check_manager

before_filter do
  Time.zone =  "Asia/Kolkata"
end

 load_and_authorize_resource
 
	def new
		@project = Project.find(params[:project_id])
		@project_module = ProjectModule.find(params[:project_module_id])
		@task = @project_module.tasks.new
	end

	def index
		@project = Project.find(params[:project_id])
		@project_module = ProjectModule.find(params[:project_module_id])
		@tasks = @project_module.tasks
	end
	

	def create
	
		@project = Project.find(params[:project_id])
      if !@project.act_start_date.present?
          @project.act_start_date  = Time.now.in_time_zone("Asia/Kolkata")
         end
             @project_module = ProjectModule.find(params[:project_module_id])
   #@task = Task.find(params[:id])
   			if @project_module.present?
         if !@project_module.act_start_date.present?
     	       @project_module.act_start_date  = Time.now.in_time_zone("Asia/Kolkata")
         end

				  #p = Task.where("date(est_start_date) >= ? AND date(est_end_date) <= ? AND user_id= ? ", params[:task][:est_start_date].to_date , params[:task][:est_end_date].to_date, params[:task][:user_id])
					
         
         #if p.size > 0 
        #redirect_to  project_project_module_tasks_path(@project,@project_module), :notice => "Task not assigned for same dates"
          #else
         if (params[:task][:est_start_date].present? && (params[:task][:est_start_date]).to_date < (@project_module.est_start_date))
      		flash[:notice] = "Task Rejected as task's Estimated Start date is less than Module's Estimated Start date"
      			redirect_to new_project_project_module_task_path(@project,@project_module)
     			else 
      			if (params[:task][:est_end_date].present? && (params[:task][:est_end_date]).to_date > (@project_module.est_end_date)) 
       				flash[:notice] = "Task Rejected as Task's Estimated End date is greater than Module's Estimated End date"
       					redirect_to new_project_project_module_task_path(@project,@project_module)
      			else
       				@project = Project.find(params[:project_id])
       				@project_module = ProjectModule.find(params[:project_module_id])
       				@task  =@project_module.tasks.new(task_params)
       					if @task.save
        					redirect_to project_project_module_tasks_path(@project,@project_module), :notice => "Successfully submit Task's details"
       						else
        						render :new 
       					end
              
             
      			end
     		end
    				else
       				@project = Project.find(params[:project_id])
       				@project_module = ProjectModule.find(params[:project_module_id])
       				@task  =@project_module.tasks.new(params[:id])
       					if @task.save
        					redirect_to project_project_module_tasks_path(@project,@project_module), :notice => "Successfully submit Task's details.."
       						else
        						render :new 
     						end
    			end
  	end


  def edit
   @project = Project.find(params[:project_id])
   @project_module = ProjectModule.find(params[:project_module_id])
   @task  = Task.find(params[:id])
  end

  def show
   @project = Project.find(params[:project_id])
   @project_module = ProjectModule.find(params[:project_module_id])
   @task  =  @project_module.tasks.find(params[:id])
  end

  def update
   @project = Project.find(params[:project_id])
   @project_module = ProjectModule.find(params[:project_module_id])
   @task= @project_module.tasks.find(params[:id])
    if @task.update_attributes(task_params)
     redirect_to project_project_module_tasks_path(@project,@project_module), :notice => "Updated Successfully"
     else
      render :edit , :notice => "sorry..something is wrong"
    end
  end

  def destroy
   @project = Project.find(params[:project_id])
   @project_module = ProjectModule.find(params[:project_module_id])
   task = Task.find(params[:id])  
   task.destroy
    redirect_to project_project_module_tasks_path(@project,@project_module), :notice => "Successfully deleted"
  end
	
	def task_update
		@project = Project.find(params[:project_id])
     if !@project.act_start_date.present?
        @project.act_start_date = Time.now.in_time_zone("Asia/Kolkata")
        @project.save
        redirect_to project_project_module_tasks_path(@project, @project_module)
       return
       end

        ProjectUser.update_all({start_date: Time.now.in_time_zone("Asia/Kolkata")},["project_id = ?", @project.id.to_s])

         @project_module = ProjectModule.find(params[:project_module_id])
   
         if !@project_module.act_start_date.present?
             @project_module.act_start_date = Time.now.in_time_zone("Asia/Kolkata")
             @project_module.save
              redirect_to project_project_module_tasks_path(@project, @project_module) 
           return
        end
		     task = Task.find(params[:id])
		     task.act_start_date = Time.now.in_time_zone("Asia/Kolkata")
    
		     task.status = "Work in progress"	
		    if task.save
			    redirect_to project_project_module_tasks_path(@project, @project_module), :notice => "Task Started"
		    else
			    render :text => "oops...task not updated"
		   end 
	 end

   def task_under
    @project = Project.find(params[:project_id])
    @project_module = ProjectModule.find(params[:project_module_id])
		task = Task.find(params[:id])
		task.status = "Gone for Testing"	
		if task.save
         redirect_to project_project_module_tasks_path(@project, @project_module),:notice => "Task Gone for testing"
		else
			render :text => "Failure occured"
		end 
	 end
   
    def task_deploy
    @project = Project.find(params[:project_id])
    @project_module = ProjectModule.find(params[:project_module_id])
		task = Task.find(params[:id])
    task.act_end_date = Time.now.in_time_zone("Asia/Kolkata")
		task.status = "Deployed"	
		if task.save
         
         
          s=@project_module.tasks.where.not("status=?","Deployed")
          if s.size==0
           @project_module.act_end_date=	Time.now.in_time_zone("Asia/Kolkata")
           @project_module.project.act_end_date= Time.now.in_time_zone("Asia/Kolkata")
           @project_module.save
           @project_module.project.save
             redirect_to project_project_module_tasks_path(@project, @project_module), :notice => "Module completed"
          end
          
                
				else
					redirect_to project_project_module_tasks_path(@project, @project_module),:notice => "Task completed"
				end

        ProjectUser.update_all({end_date: Time.now.in_time_zone("Asia/Kolkata")},["project_id = ?", @project.id.to_s])
			
	 end

private
    def check_manager
		 @project = Project.find(params[:project_id]) 
		redirect_to projects_path  if @project.user != current_user && !current_user.isAdmin
		end

   def task_params
	   params.require(:task).permit(:est_end_date, :project_id, :est_start_date, :act_start_date,:act_end_date,:user,:task_description,
      :task,:user_id,:project_module_id,:status)
   end
end











